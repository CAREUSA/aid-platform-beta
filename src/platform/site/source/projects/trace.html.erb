---
title: Development Tracker
---

<%= partial "partials/projects-header", :locals => { :project => project, :active => "trace", :results => results, :has_funded_projects => has_funded_projects, :has_receipient_project => true} %>

<div class="row">
    <div class="twelve columns summary">    
      <p>First level Raw Data</p>

      <div>
            <%= results %>
      </div>
        

        <hr/>        
    </div>

    <!-- <div class="twelve columns summary">    
      <p>Second level Raw Data</p>

      <div>
            <% results = get_child_funded_projects_by_level(results['id'], nil, 2) %>
            <%= results %>
      </div>
        

        <hr/>        
    </div> -->    
</div>

<div class="row" id="viz" style="border: 1px solid black; padding-left: 2em">
  <style>
 
    .link {
      fill: none;
      stroke: #000000;
      stroke-width: 4.5px;
    }
</style>
  <script type="text/javascript">             

            (function(){
          
    //JSON object with the data
      /* var treeData = {"id" : "A", "info" : "tst", "children" : [
            {"id" : "A1" },
            {"id" : "A2" },
            {"id" : "A3", "children": [
                  {"id" : "A31", "children" :[
            {"id" : "A311" },
            {"id" : "A312" }
    ]}] }
      ]}; */

      var treeData = <%=results.to_json%>
 
      // Create a svg canvas
      var vis = d3.select("#viz").append("svg:svg")
      .attr("width", 800)
      .attr("height", 1200)
      .append("svg:g")
      .attr("transform", "translate(160, 0)"); // shift everything to the right
 
      // Create a tree "canvas"
      var tree = d3.layout.tree()
    .size([800,250]);
 
      var diagonal = d3.svg.diagonal()
      // change x and y (for the left to right tree)
      .projection(function(d) { return [d.y, d.x]; });
 
      // Preparing the data for the tree layout, convert data into an array of nodes
      var nodes = tree.nodes(treeData);
      // Create an array with all the links
      var links = tree.links(nodes);
 
      console.log(treeData)
      console.log(nodes)
      console.log(links)
 
      var link = vis.selectAll("pathlink")
      .data(links)
      .enter().append("svg:path")
      .attr("class", "link")
      .attr("d", diagonal)
 
      var node = vis.selectAll("g.node")
      .data(nodes)
      .enter().append("svg:g")
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
 
      // Add the dot at every node
      node.append("svg:circle")
      .attr("r", 3.5);
 
      //place the id atribute left or right depending if children
      node.append("svg:text")      
      .attr("dx", function(d) { return d.children ? -8 : 8; })
      .attr("dy", 8)
      .attr("text-anchor", function(d) { return d.children ? "end" : "start"; })      
      .text(function(d) { return d.id; })

      //.html("<a href='#'>link</a>")
      //.on("click",function(d,i) { alert("Clicked on the text");});
      //.call(wrap, 20)

      })();

      node.append("svg:a")
      .attr("xlink:href", function(d){ return "/projects/=" + d.id })
      // .append("svg:text")
      // .attr("dx", function(d) { return d.children ? -8 : 8; })
      // .attr("dy", 8)
      // .attr("text-anchor", function(d) { return d.children ? "end" : "start"; })      
      // .text(function(d) { return d.id; })





      function wrap(text, width) {
  text.each(function() {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 1.1, // ems
        y = text.attr("y"),
        dy = parseFloat(text.attr("dy")),
        tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
    while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
      }
    }
  });
}

          </script> 
    <hr/>
</div>

<div class="row" id="viz2" style="border: 1px solid black; padding-left: 2em">
    <style type="text/css">
      .node {
      border: solid 1px white;
      font: 10px sans-serif;
      line-height: 12px;
      overflow: hidden;
      position: absolute;
      text-indent: 2px;
    }
    </style>

    <script type="text/javascript">

(function(){


    var margin = {top: 40, right: 10, bottom: 10, left: 10},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

    var color = d3.scale.category20c();

    var treemap = d3.layout.treemap()
    .size([width, height])
    .sticky(true)
    .value(function(d) { return 1; });

    var div = d3.select("#viz2").append("div")
    .style("position", "relative")
    .style("width", (width + margin.left + margin.right) + "px")
    .style("height", (height + margin.top + margin.bottom) + "px")
    .style("left", margin.left + "px")
    .style("top", margin.top + "px");

    var root = <%=results.to_json%>

    var node = div.datum(root).selectAll(".node")
      .data(treemap.nodes)
    .enter().append("div")
      .attr("class", "node")
      .call(position)
      .style("background", function(d) { return d.children ? color(d.id) : null; })
      .text(function(d) { return d.children ? null : d.id; });

    })();

    function position() {
  this.style("left", function(d) { return d.x + "px"; })
      .style("top", function(d) { return d.y + "px"; })
      .style("width", function(d) { return Math.max(0, d.dx - 1) + "px"; })
      .style("height", function(d) { return Math.max(0, d.dy - 1) + "px"; });
}

    </script>

    <hr/>
</div>

<div class="row" id="viz3" style="border: 1px solid black; padding-left: 2em">

<style type="text/css">

.node circle {
   fill: #000;
   stroke: #000;
   stroke-width: 3px;
 }

 .node text { font: 12px sans-serif; }

 .link {
   fill: "black";
   stroke: "black";
   stroke-width: 2px;
 }

</style>
<script type="text/javascript">
  
  // ************** ????????????  *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
 width = 1280 - margin.right - margin.left,
 height = 800 - margin.top - margin.bottom;
 
var i = 0;
var radius = 10;

var defaultNodeSize = 5.5;
var horizontalTreeOffset = 150;
var horizontalNodeOffset = horizontalTreeOffset - 10;
var horizontalNodeOffsetLeaf = horizontalTreeOffset + 10;

var tree = d3.layout.tree()
 .size([height, width]);

var diagonal = d3.svg.diagonal()
 .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("#viz3").append("svg")
 .attr("width", width + margin.right + margin.left)
 .attr("height", height + margin.top + margin.bottom)
  .append("g")
 .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var color = d3.scale.category20();

root = <%=results.to_json%>;
  
update(root);

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
   links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Declare the nodesâ€¦
  var node = svg.selectAll("g.node")
   .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
   .attr("class", "node")
   .attr("transform", function(d) { 
    return "translate(" + d.y + "," + d.x + ")"; });

  nodeEnter.append("circle")
   .attr("r", radius)
   .style("fill", "#fff");

  // nodeEnter.append("text")
  //  .attr("x", function(d) { 
  //   return d.children || d._children ? -13 : 13; })
  //  .attr("dy", ".35em")
  //  .attr("text-anchor", function(d) { 
  //   return d.children || d._children ? "end" : "start"; })
  //  .text(function(d) { return d.id; })
  //  .style("fill-opacity", 1);

   // Use foreignObject to append HTML text in order to implement word wrapping
  nodeEnter.append("svg:foreignObject")
      .attr("width", "300")
      .attr("height", "60")
      .attr("x", -50)
      .attr("y", -15)
      .style("opacity", 0.8)
      .attr("text-anchor", "start")      
    .append("xhtml:body")
      .attr("xmlns", "http://www.w3.org/1999/xhtml")
      .html(function(d){ return "<a href=/projects/" + d.id + ">" + d.id + "</a>"; });

  // Declare the linksâ€¦
  var link = svg.selectAll("path.link")
   .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
   .attr("class", "link")
   .attr("d", diagonal)
   .style("stroke", function (d) { return 'black'; })


   
}


</script>
<hr/>
</div>

<div class="row" id="viz4" style="border: 1px solid black; padding-left: 2em">

<style>

circle {
  fill: rgb(31, 119, 180);
  fill-opacity: .25;
  stroke: rgb(31, 119, 180);
  stroke-width: 1px;
}

.leaf circle {
  fill: #ff7f0e;
  fill-opacity: 1;
}

text {
  font: 10px sans-serif;
}

</style>


<script>

var root = <%=results.to_json%>;

var diameter = 960,
    format = d3.format(",d");

var pack = d3.layout.pack()
    .size([diameter - 4, diameter - 4])
    .value(function(d) { return d.value; });

var svg = d3.select("#viz4").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
  .append("g")
    .attr("transform", "translate(2,2)");

// d3.json("flare.json", function(error, root) {
  var node = svg.datum(root).selectAll(".node")
      .data(pack.nodes)
    .enter().append("g")
      .attr("class", function(d) { return d.children ? "node" : "leaf node"; })
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.id + (d.children ? "" : ": " + format(d.value)); });

  node.append("circle")
      .attr("r", function(d) { return d.r; });

  node.filter(function(d) { return !d.children; }).append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.id.substring(0, d.r / 3); });
// });

d3.select(self.frameElement).style("height", diameter + "px");

</script>
<hr/>
</div>

